   06_Object Behavior, encapsulation and multidimensional arrays
1.	Object Behavior
	State ? represented by instance variables = ¡®KNOWS¡¯
	Behavior ? represented by methods = ¡®DOES¡¯
2.	Method Behavior
	Parameters = used in a method
	Arguments = passed to a method by the caller
Ex) 
public void bark (int numOfBarks){ <- numOfBarks is a parameter
while (numOfBarks > 0){
System.out.println("Woof woof");
numOfBarks;
}
}
Dog d= new Dog();
d.bark(3) <- 3 is an argument
	Multiple Parameters: Methods can have multiple parameters of different types.
	Variable Arguments: Java offers also a way to send any number of arguments of the same type to a method.
Ex) 
int sum (int... numbers){
int total = 0;
for (int i = 0; i < numbers.length; i++)
total += numbers [i];
return total;
}
// call the method
int sum1 = sum(1,2,3,4);
int sum2 = sum(1,2);
	Pass-By-Value: Java creates a copy of a variable before passing it to a method.
3. Encapsulation
	Getters and Setters: 
	Getters: takes a parameter ? new value for an instance variable. It usually returns nothing.
	Setters: usually has no parameters, and it returns the value of an instance variable.
	Encapsulation: means that we hide instance variables (i.e. the data) and provide methods for accessing and changing them (i.e. getters and setters).
	Three steps of encapsulation:
1. mark all instance variables private so they are well hidden.
2. mark getters and setters public so they can be accessed by anyone.
3. Add guardians to setters (if needed).
4. Multidimensional Arrays
	type [][] array_name = new type[size1][size2];
	Initialization: 
	int[][] board = new int[][] {{1,0,0},{0,1,0},{1,2,1}};
	int[][] a = new int[2][2];
a[0][0] = 5;
a[0][1] = 6;
a[1][0] = 8;
a[1][1] = 3;
	iterating with a for-each loop
for (int x[] : nums) {
for (int y : x){
System.out.println(y);
}
}
